
       First 16
Opcode   Unused #Reg
12-bits   1      3

Up to 7 registers can be used

Registers =
    RRMM
        RR = Register number (00-FF)
        MM = Mode (S----MMM where S = store, MMM = Mode)
            00 = Rx
            01 = Ax,X
            02 = Ax,Y
            03 = Rx++
            04 = Rx--
            05 = ++Rx
            06 = --Rx


Instruction Fetch, Decode, Execute Store Steps
    - Read first 16-bits (opcode)
    - If Extension bit is set, read another 16 bits and combine to a 32-bit opcode
    - Using first 16-bits from here on, for each register pair
        - Read the first register -- we'll store this in a temporary storage entity 'tempstore' (64-bits)
        - Select on mode:
            - 00 - If Dx, tempstore = Dx
                 - If Ax, tempstore = Memory(Ax)
            - 01 - If Dx, can't be used in storage
                 - If Ax, tempstore = Memory(Ax+X)
            - 02 - If Dx, can't be used in storage
                 - If Ax, tempstore = Memory(Ax+Y)
            - 03 - If Dx, can't be used in storage
                 - If Ax, tempstore = Memory(Ax), increment Ax
            - 04 - If Dx, can't be used in storage
                 - If Ax, tempstore = Memory(Ax), decrement
            - 05 - If Dx, can't be used in storage
                 - If Ax, increment Ax, tempstore = Memory(Ax)
            - 06 - If Dx, can't be used in storage
                 - If Ax, decrement Ax, tempstore = Memory(Ax)
        Further registers:
            - 00 - If Dx, use this register value
                 - If Ax, value = Memory(Ax)
            - 01 - If Dx, value = Dx+X
                 - If Ax, value = Memory(Ax+X)
            - 02 - If Dx, value = Dx+Y
                 - If Ax, value = Memory(Ax+Y)
            - 03 - If Dx, value = Dx; Dx++
                 - If Ax, value = Memory(Ax), Ax++
            - 04 - If Dx, value = Dx; Dx--
                 - If Ax, value = Memory(Ax); Ax--
            - 05 - If Dx, Dx++; value = Dx
                 - If Ax, Ax++; value = Memory(Ax)
            - 06 - If Dx, Dx--; value = Dx
                 - If Ax, Ax--; value = Memory(Ax)

Register codes
    Rx = Dx or Ax

Condition Codes
    Z = Zero
    N = Not-Zero
    G = Greater-Than
    L = Less-Than

-- System instructions * = Privileged
 Op  Mod
0000  0    STOP               Stop the processor
0010  0    NOOP               No operation
0022  0    GSREG Dx, Dy       Get value from special register Dx return in Dx
0032  0    SSREG Dx, Dy       Set value to special register Dy from Dx

-- Memory Move/Store instructions
0102 0  MOVE8 Rx, Ry          Move Ry -> Rx (8 bits)
0112 0  MOVE16 Rx, Ry         Move Ry -> Rx (16 bits)
0122 0  MOVE32 Rx, Ry         Move Ry -> Rx (32 bits)
0132 0  MOVE64 Rx. Ry         Move Ry -> Rx (64 bits)
0141 0  MOVEI8 Rx, #value     Move literal value (8 bits)
0151 0  MOVEI16 Rx, #value    Move Literal value (16 bits)
0161 0  MOVEI32 Rx, #value    Move literal value (32-bits)
0171 0  MOVEI64 Rx, #value    Move literal value (64-bits)
0183 0  COPYM Ax, Ay, Dx      Capy memory Ay -> Ax for Dx units (implies 8 bits)
0193 1  COPYP Rx, Ry, Dx      Copy Dx pages from Ry to Rx
01A2 0  CMP8 Rx, Ry           Compare Rx to Rx -> Dx (8-bits)
01B2 0  CMP16 Rx, Ry          Compare Ry to Rx -> Dx (16-bit)
01C2 0  CMP32 Rx, Ry          Compare Ry to Rx -> Dx (32-bit)
01D2 0  CMP64 Rx, Ry          Compare Ry to Rx -> Dx (32-bit)
01E2 1  CMPP Dy, Dz           Compare page Dy to Dz result > Dx


--- Math instructions
0302 0 IADD64 Dx, Dy            Dx = Dx + Dy
0312 0 ISUB64 Dx, Dy            Dx = Dx - Dy
0322 0 IMULT64 Dx, Dy           Dx = Dx * Dy
0332 0 IDIV64 Dx, Dy            Dx = Dx / Dy
0342 0 IMOD64 Dx, Dy            Dx = Dx % Dy
0352 0 IAND64 Dx, Dy            Dx = Dx & Dy
0362 0 IOR64 Dx, Dy             Dx = Dx | D
0372 0 IXOR64 Dx, Dy            Dx = Dx XOR Dy
0382 0 ISHIFTL64 Dx, Dy         Dx = Dx << Dy
0392 0 ISHIFTR64 Dx, Dy         Dx = Dx >> Dy
03A1 0 INOT64 Dx                Dx = ^Dx
03B2 1 FADD64 Dx, Dy            Dx = Dx + Dy
03C2 1 FSUB64 Dx, Dy            Dx = Dx - Dy
03D2 1 FMULT64 Dx, Dy           Dx = Dx * Dy
03E2 1 FDIV64 Dx, Dy            Dx = Dx / Dy
03F1 1 FSIN64 Dx                Dx = Sin(Dx)
0401 1 FCOS64 Dx                Dx = Cos(Dx)
0411 1 FTAN64 Dx                Dx = Tan(Dx)
0421 1 FASIN64 Dx               Dx = Sin-1(Dx)
0431 1 FACOS64 Dx               Dx = Cos-1(Dx)
0441 1 FATAN64 Dx               Dx = Tan-1(Dx)
0451 1 FLN64 Dx                 Dx = Ln(Dx)
0461 1 FETOX64 Dx               Dx = e^(Dx)
0472 1 FPOWER64 Dx, Dy          Dx = Dx raised to power Dy
0482 1 FROOT64 Dx, Dy           Dx = Dx-th Root of Dy
0491 1 FTOR64 Dx                Convert floating point Dx to Int64
04A1 1 DTOF64 Dx                Convert Int64(Dx) to Float64(Dx)

0503 1 STRNCPY Dx, Ax, Ay       Copy string Ay to Ax up to Dx units
0512 1 STRLEN  Dx, Ax           Dx = Length of string Ax
0523 1 STRNCMP Dx, Ax, Ay       Compare strings Ax and Ay -> Dx
0533 1 STRFIND Dx, Ax, Ay       Find first occurance of stirng Ay in Ax -> Position to Dx
0544 1 STRCAT Ax, Ay, Az, Dx    Ax = Ay + Az up to Dx units
0551 2 SSPRE Dx                 Set string type
                                    0 = ASCII 8-bit null terminated
                                    1 = ASCII 8-bit length prefix
                                    2 = UTF-8
-- Test/Jump/Branching instructions
0603 0 TEST Dx, Rx, Ry         Perform test Dy on Rx and Ry -> Dx
0612 0 TBITSET  Dx, Rx         Dx = Is bit Dy set in Rx -> Dx
0622 0 TBITCLR  Dx, Rx         Dx = Is bit Dy clear in Rx -? Dx
0631 0 PUSH8 Rx                Push 8-bit value Rx to stack
0641 0 PUSH16 Rx               Push 16-bit value Rx to stack
0651 0 PUSH32 Rx               Push 32-bit value Rx to stack
0661 0 PUSH64 Rx               Push 64-bit value Rx to stack
0671 0 POP8 Rx                 Pop 8-bit Rx from to of stack
0681 0 POP16 Rx                POp 16-bit value from stack
0691 0 POP32 Rx                Pop 32-bit value from stack
06A1 0 POP64 Rx                Pop 64-bit value from stack
06B1 0 JUMP64 Ax               Jump to address Ax )
06C1 0 JUMPI64 #value          Jump to 64-bit value
06D1 0 CALL64 Ax               Call subroutine at Ax
06E1 0 CALLI64 #value          Call litteral address
06F0 0 CALLRET                 Return from call
0701 0 BRTCOND #Cond, Ax       Branch on condition set
0711 0 BRFCONF #COnd, Ax       Branch on condition not set
0721 0 BRTCONDI #Cond, #Value  Branch to immediate value on condition
0731 0 BRFCONDI #Cond, #value  Branch to immediate value on conditoin false
0742 0 TZBR Rx Ax              If Rx == 0, Branch to Ax
0752 0 TZBRI Rx, #Value        If Rx == 0, Branch to immediate
0762 0 TNZBR Rx Ax             If Rx != 0, Branch to Ax
0772 0 TNZBRI Rx, #Value       If Rx != 0, Branch to immediate
0780 0 SERVICERET              Return from service routine
0790 0 SYSCALL                 Perform system call
07A0 0 TRAPRET                 Return from trap

--- Messaging I/O
0803 1 MSGSEND Dx, Ax, Dy          Send an IPC message on channel Dy, from buffer Ax, result in Dx
0813 1 MSGRECV Dx, Ax, Dy          Get an IPC message on channel Dy and put it into Ax, result in Dx
0823 1 MSGAVAIL Dx, Dy             Is an IPC message available on channel Dy  Result in Dx
0833 1 MSGWAIT Dx, Dy, Dz          Wait on message channel Dy (blocking for Dz ms) -> Dx
0843 0 IOREQ Dx, Dy, Dz, Ax        Send an IO Message to Dy with command Dz, data Ax, result in Dx
0853 1 BUFFERALLOC Dx, Dy, Ax      Allocate Dy I/O buffers to Ax, Result in Dx
0863 1 BUFFERFREE  Dx, Ax          Free Ax I/O buffers

-- Utility functions
0902 3 ENCRYPT Ax, Ay              Encrypt a block in Ax to Ay
0912 3 DECRYPT Ax, Ay              Decrypt a block in Ax to Ay
0923 3 ENCRSETUP Dx, Dy, Ax        Set up encryption mode Dy data from Ax, result in Dx
0934 3 HASH Dx, Dy, Ax, Ay         Compute Dy hash of Ax to Ay.  Result in Dx
0944 2 QUEUEFRONTPUSH Dx, Dy, Ax   Push on to stack
0953 2 QUEUEBACKPUSH Dx, Dy, Ax    Pop from stack
0962 2 QUEUEFRONTPOP Dx, Dy, Ax    Push (stack) 64 bytes onto queue Dy, Result in Dx
0973 2 QUEUEBACKPOP Dx, Dy, Ax     Pop (stack) 64 bytes from queue Dy.  Result in Dx
0981 2 QUEUECLR Dx                 Clear queue Dy
0992 2 QUEUEEMPTY Dx, Dy           Is  Queue Dy empty -> Dx
09A4 2 DICTINSERT Dx, Dy, Ax, Ay   Insert 64-bytes (Ax) into dictionary Dy with value 64-bytes (Ay)
09B4 2 DICTREMOVE Dx, Dy, Ax       Remove Ax from dctionary Dy -> Result in Dx
09C4 2 DICTFIND Dx, Dy, Ax, Ay     Find Ax in dictionary Dy.  Result in Dx, Dy
09D1 2 DICTCLR Dx                  Clear dictionary Dx
09E5 3 SORT Dx, Dy, Ax, Ay, Az     Sort Dx records, Ax to Ay via method Az. Length of record Dy
09F4 3 SOUNDEX Dx, Dy, Ax, Ay      Compute soundex code for Ax to Ay using mode Dy.  Result in Dx
0A00 3 SERESET                     Secure enclave reset59
0A10 3 SEINSERT Ax, Ay             Secure enclave insert key Ax, value Ay
0A23 3 SEMATCH Dx, Ax, Ay          Given a key Ax, and a value Ay, are they correct -> Dx
0A32 3 SEREMOVE Dx, Ax             Remove key Ax from secure enclave -> Dx

-- Process thread instructions
0B00 3 YIELD                       Yield the CPU
0B11 3 GETPID Dx                   Return PID in Dx
0B21 3 FORK Dx                     Fork a process - return new PID in Dx
0B30 3 JOIN                        Join proccessses
0B41 3 ELEVATE Dx                  Become super user to privilege Dx -- returns state in Dx
0B51 3 SLEEP Dx                    Sleep a propcess for Dx time units
0B60 3 TICK                        Sleep one time cycle
0B71 3 NICE Dx                     Set process priotity to Dx
0B83 3 LOCK Dx, Dy, Dz             Try to obtain a lock Dx, type Dy. result in Dz
0B91 3 UNLOCK Dx, Dy               Try to unlock a lock in Dx, result in Dy
                                          Dy = 0  Mutual Exclusion
                                          Dy = 1  Barrier lock
                                          Dy = 2  Read lock
                                          Dy = 3  Write lock
0BA4 3 ATSTSET Aw, Dx, Dy, Dz      Atomic test-and-test
                                       Test Ax for value Dx.  If true, set Ax to Dy
                                       Result in Dx

--- Lower-level OS instructions
0C0- 3 *GURU                       Call Guru monitor supervisor function
0C13 3 *INPORT Dx, Dy, Dz          Get a word from Port Dz and store in Dy.  Result in Dz
0C23 3 *OUTPORT Dx, Dy, Dz         Write a word in Dz to Port Dy.  Result in Dx
0C30 3 *RESETCPU                   Reset processor
0C40 3 *DEBUG                      Debug break
0C50 0 *SYSRET                     Return from system call
0C6= 0 *TRAP                       Perform system trap
0C70 3 *TASKSW Dx                  Task switch to value process in Dx


--- Every other processor has something like this -- we need one too
FFF0 3 HCFB                        Halt, Catch fire, go boom!  No idea why this is needed but everyone else has one
                                   We'll probably just play a sad trambone or something

Pragmas
    .proessor name ...values.                  Define parameters for a processor type
    .memory [flat|kernel|monitor]               Define memory model parameters
    .format [asm|binary]                        Format of input data
    .output [oobj|obin] [pic]                   Define binary output format (optional) [position independent]
    .password xxxxxx xxxxxxx                    Require a password to run (optional)
    .require [model|feature|memory|iO] [value]  Require a resource to run (optional)
    .desire [model|feature|memory|iO] [value]   Require a resource to run (optional)
    .priv [mode]                                Require specific privilege
    .segment [name] [rwxlnsdlk]                 Define segment permissions code|data|stack read|write|execute|locked|
                                                                            [normal|service|driver|kernel]
    .end                                        End of file
    .include "filename"                         Include a source file
    .[no]list                                   Enable listing
    .extern [symbolname]                        Require a symbol that is external
    .public [symbolname]                        Define a publicly known symbol (often used by extern)a
    .db xx ...                                  Define a byte set
    .dw xxxx ...                                Define a word set
    .dd xxxxxxxx ....                           Define a double world set
    .dq xxxxxxxxxxxxxxxx ...                    Define a quad word set
    .das " "                                    Define ASCII8 string
    .dus " "                                    Define unicode-16 string
    .df xxxx.xxxx                               Define 64-bit floating point set
    .macro name ....                            Define a macro
    .endm                                       End macro definition
    @name                                       Invoke a macro
    .func [name] [calling convention]           Function calling convetion (ex: func main clinux)
    ex: main ccall

Registers =
    0x00-0x1F   64-bit data registers Dx (32) Can be swapped
    0x20-0x3F   64-bit address registers Ax (32) Can be swapped
    0x40-0x5F   64-bit Process control/flag registers Cx (32)
    0x60-0x7F   64-bit System control/flag registers Cx (32)

Special registers
    0x1F    Y index
    0x1E    X index

    0x40   Process message interrupt mask
    0x41   Process Message service table address
    0x42   Process Trap service table address
    0x43   Status bits
        0x----:----:----:---1   - Zero value result
        0x----:----:----:---2   - Greater-than result
        0x----:----:----:---4   - Less than result
        0x----:----:----:---8   - Process received error
        0x----:----:---1:----   - Error is fatal
        0x----:----:---2:----   - Inside trap
        0x----:----:---4:----   - Inside trap service routine
        0x----:----:---8:----   - Inside I/O serivce routine
        0x----:----:--1-:----   - In privileged mode
        0x8---:----:--2-:----   - CPU was just reset
    0x44    Messages needing service
    0x45    Process Interrupt service table address
    0x46    Process Interrupt service table mask
    0x47    Process return address from CALL/JUMP
    0x48    Process return address from SERVICE routine

Special Control Registers
    0x00   MMU Control Block address
    0x01   System message interrupt mask
    0x02   System message interrupt service table address
    0x03   System Message service table address
    0x04   System Trap service table address
    0x05   System Control
        0x----:----:----:---1   - Disable shadow stack protection
        0x----:----:----:---2   - Enable single-step
        0x8---:----:----:----   - Reset CPU to startup state
    0x06    System bank/process/task selector
        0x----:----:----:----   - Not used in Onyx1L, Onyx1B

Traps =>
    IllegalMemoryReferenceTrap(-1)
    IllegalParameterTrap(-2)
    IllegalInstructionTrap(-3)
    IllegalPriviledgeTrap(-4)
    StackCorruptionTrap(-5)

Messages =>
    InboundSoftwareMessage
    InboundHardwareMessage
    InboundCPUMessage

ProcessContextArray map[PPPP]ProcessContext
ProcessContext =>
        Registers[]
        ShadowStack[]

cpu =>
    ProcessContext Ptr
    MonitorInterface
    IOInterface
    MemoryInterface

-- IO Descripters
   16-class 0-0xFFFF
   16-IO ID 1-0xFFFF (0 = use base class)
   32-bits IO specific


        ;; Write to text console
        MOVEI D1, 0x0006'0000'0000'0000 ; Class 6, unit 0
        MOVEI D2, 0x0000'0000'0000'0001 ; Write text
        MOVE  A0, TextMessage           ; Address of text string
        IOREQ D0, D1, D2, A0

Examples:
0000:Bios
   0001: System data
                0x0000'0000'0000'0001 -- Get BIOS version
   0002: Timers
                0000'0000'0000'0000: Set periodic timer
                0000'0000'0000'0001: Clear periodic timer
                0000'0000'0001'0000: Set countdown timer
                0000'0000'0001'0001: Clear countdown timer
   0003: Real-time clock
                0000'0000'0000'0000: Read time in ms
                0000'0000'0000'0001: Set time in ms
                0000'0000'0000'0002: Read ascii date/time
                0000'0000'0000'0003: Read ascii date
                0000'0000'0000'0004: Read ascii time
    0004: Boot system
                0000'0000'0000'0000: Boot OS #
                0000'0000'0000'0001: Get OS list
0001: Legacy Card Unit
    000U: Reader unit #
                0000'0000'0000'0000 -- Read next card
                FFFF'FFFF'FFFF'FFFE -- Unit information
                FFFF'FFFF'FFFF'FFFF -- Unit status
                 F    E    D    C    B    A    9    8    7    6    5    4    3    2    1    0
                ----:----:----:----:----:----:----:CCCC:----:----:----:----:----:----:----:--RE
                R = Unit ready
                E = Error
                CCCC = Card size in characters
    010U: Punch unit #
                0000'0000'0000'0000 -- Punch a card
                FFFF'FFFF'FFFF'FFFE -- Unit information
                FFFF'FFFF'FFFF'FFFF -- Status
                 F    E    D    C    B    A    9    8    7    6    5    4    3    2    1    0
                ----:----:----:----:----:----:----:CCCC:----:----:----:----:----:----:----:--RE
                E = Error
                R = Unit ready
                CCCC = Card size in characters
0002: Legacy Reel tape
    000U: Tape unit
                0000'0000'0000'0000 -- Load tape
                0000'0000'0000'0001 -- Unload tape
                0000'0000'0000'0002 -- Write blocks
                0000'0000'0000'0003 -- Read blocks
                0000'0000'0000'0004 -- Seek to block
                0000'0000'0000'0005 -- Rewind tape
                0000'0000'0000'0006 -- Format directory
                0000'0000'0000'0007 -- Write entry in directory
                0000'0000'0000'0008 -- Read directory entry
                FFFF'FFFF'FFFF'FFFE -- Unit information
                FFFF'FFFF'FFFF'FFFF -- Drive status
                 F    E    D    C    B    A    9    8    7    6    5    4    3    2    1    0
                ----:----:----:----:----:----:CCCC:CCCC:BBBB:BBBB:----:----:----:----:--BX:WLRE
                    R = Ready
                    L = Loaded
                    E = End of tape
                    W = Write protect
                    X = Error
                    B = At beginning of tape
                    CCCC:CCCC Block size
                    BBBB:BBBB Number of blocks
0003: Disk pack/Hard drive
    1CDP: Controller/Disk #/Partition
                0000'0000'0000'0000 -- Load pack
                0000'0000'0000'0001 -- Unload pack
                0000'0000'0000'0002 -- Lock/Unlock pack
                0000'0000'0000'0003 -- Write/No-write protect
                0000'0000'0000'0004 -- Write blocks
                0000'0000'0000'0005 -- Read blocks
                0000'0000'0000'0006 -- Seek to block
                0000'0000'0000'0007 -- Mark block as bad
                FFFF'FFFF'FFFF'FFFE -- Unit Information
                FFFF'FFFF'FFFF'FFFF -- Drive status?
                 F    E    D    C    B    A    9    8    7    6    5    4    3    2    1    0
                ----:----:----:----:----:----:CCCC:CCCC:BBBB:BBBB:----:----:----:----:--ST:XURL
                    R = Ready
                    L = Locked
                    U = Unloaded
                    X = Error
                    T = Needs trim
                    S = SSD/NAND
                    CCCC:CCCC Block size
                    BBBB:BBBB # of Blocks
0004: Printer
    10UM: Unit #/Mode
        0000'0000'0000'0000-- Print a line
        FFFF'FFFF'FFFF'FFFF-- Unit information
        FFFF'FFFF'FFFF'FFFF-- Printer status
                 F    E    D    C    B    A    9    8    7    6    5    4    3    2    1    0
                ----:----:----:----:----:----:----:----:----:DPII:NFOS:NNNN:NNNN:-DGH:PW7C:ITMR
                R = Ready
                M = Out of media (Paper)
                T = Out of toner
                I = Idle
                C = Color
                7 = 70s Cobol control codes
                W = HTML
                P = Poscript
                H = HP Grpahics
                G = Bitmapped Graphics support
                D = Drawing (Pen-style) support
                NNNN:NNNN = Device # of colors (32-bit value)
                DPIINFOS: DPI Information (32-bit value)

0005: Panel
    0001: Buttons
    0002: Bell
        0000'0000'0000'0000 -- Ring bell
    0003: Lights
        0000'0000'0000'0000 -- Set value of light
0006: HID Device
    10UU: Text Screen
        0000'0000'0000'0000 -- Write character
        0000'0000'0000'0001 -- Write line
        0000'0000'0000'0002 -- Clear screen
        0000'0000'0000'0003 -- Move curson to position
        0000'0000'0000'0004 -- Get screen size
    20UU: Text Keyboard
        0000'0000'0000'0000 -- Read character
        0000'0000'0000'0001 -- Read line
    30UU: Mouse/Touch screen
        0000'0000'0000'0000 -- Read mouse position
        0000'0000'0000'0001 -- Read mouse button
0007: Leased line services
    000U: Automatic call unit
        0000'0000'0000'0000 -- Establish a connection to a channel endpoint
        0000'0000'0000'0001 -- Disconnect a channel endpoint
    00UU: Channel Unit
        0000'0000'0000'0000 -- Send a character
        0000'0000'0000'0001 -- Send a line
        0000'0000'0000'0002 -- Send a block
        0000'0000'0000'0003 -- Receive character
        0000'0000'0000'0004 -- Receive line
        0000'0000'0000'0005 -- Receive block
        FFFF'FFFF'FFFF'FFFE -- Get unit information
        FFFF'FFFF'FFFF'FFFF -- Get status
                 F    E    D    C    B    A    9    8    7    6    5    4    3    2    1    0
                ----:----:----:----:----:----:----:----:----:----:----:----:----:----:---E:SRBC
                C = Connected
                B = Busy
                R = Ready to Receive
                S = Ready to Send
                E = Error
0008: Non IP-LAN (OnyxNet)
    0000'0000'0000'0000 -- Connect to a node endpoint
    0000'0000'0000'0001 -- Disconnect to a node endpoint
    0000'0000'0000'0002 -- Send a block on a stream
    0000'0000'0000'0003 -- Receive a block on a stream
    0000'0000'0000'0004 -- Send a unique block
    0000'0000'0000'0005 -- Receive a unique block
    0000'0000'0000'0006 -- What is my address?
    0000'0000'0000'0007 -- Set address
    FFFF'FFFF'FFFF'FFFF -- Get status
0009: Graphics
        0000'0000'0000'0000 -- Send image
        0000'0000'0000'0001 -- Clear screen
        0000'0000'0000'0002 -- Dump image to file
        0000'0000'0000'0003 -- Load image from file
        0000'0000'0000'0004 -- Get status
000A: Sound
    010C: PCM audio
        0000'0000'0000'0000 -- Send audio
        0000'0000'0000'0001 -- Receive audio
    030C: MP3
        0000'0000'0000'0000 -- Send audio
        0000'0000'0000'0001 -- Receive audio
    020C: Beeps and Boops
        0000'0000'0000'0000 -- Make beep
000B: USB
000C: IP Network
000D: Speech
    0000'0000'0000'0000 -- Say speech
    0000'0000'0000'0001 -- Attempt to read speech
000E: MIDI
000F: Object Storage
0010: GPIO/Sensors
    1UUU: Unit
        0000'0000'0000'0000: Read the value of a sensor
        0000'0000'0000'0001: Write the value to a sensor
0011: Locking daemon
    0000'0000'0000'0000 -- Lock an object
    0000'0000'0000'0001 -- Unlock an object
    0000'0000'0000'0002 -- Is an object locked
02XX: Real-world devices
FXXX: Vendor specific devices

Virtual Memory Map (In 4G page spaces) =
--4-bits---16-bits---12-bits---
  Region   Process   Segment

Memory Segment =>
    CanRead         boolean
    CanWrite        boolean
    CanExecute      boolean
    IsInMemory      boolean
    IsInCode        boolean
    ProcessID       uint16
    GroupID         uint16
    SegmentLength   uint32
    CodeHandler     CodeReference

VirtualMemoryPage =>
    SegmentID           Segment
    PhysicalMemoryPage  uint64
    InMemory            boolean
    IsLocked            boolean
    OnDisk              boolean
    IsDirty             boolean
    DiskBlock           uint64
    LastRead            uint64
    LastWritten         uint64


    0xF-0000-000 System info block
        Settings:
            F000:0000:0000:0000 Max Code Pages
            F000:0000:0000:0001 Max Data Pages
            F000:0000:0000:0002 Max Stack Pages
            F000:0000:0000:0003 Max Heap Pages
            F000:0000:0000:0004 Max Shared Memory
            F000:0000:0000:0005 Max Buffer pool
            F000:0000:0000:0006 Max ROM Size
            F000:0000:0000:0008-F000:0000:0000:000F CPU Model
            F000:0000:0000:0010-F000:0000:0000:001F Feature Set Bits
            F000:0000:0000:0020-F000:0000:0000:0023 CPU Serial Number
           :0000:0000:0030 Rom info jump address
            F000:0000:0000:0031 System startup address
            F000:0000:0000:0040 Boot device
            F000:0000:0000:0041 Memory Mode
            F000:0000:0000:0042 Max Segments
            F000:0000:0000:0043 Max Processes
            F000:0000:0000:0044 Max Banks
            F000:0000:0000:0045-F000:0000:00048 Node GUID ID
            F000:0000:0000:0049-F000:0000:0004C Node Zone GUID ID
            F000:0000:0000:004D Address of monitor entry point
    0xF-0001-004 UEFI Bios Shadow Stack
    0xF-0001-003 UEFI Bios Stack
    0xF-0001-001 UEFI Bios Heap
    0xF-0001-001 UEFI Bios Data
    0xF-0001-000 UEFI Bios Code
    0xF-0002-III I/O Space (III = IO Class)
    0xF-0003-III Buffer Pool Space (III = IO Class)
    0xF-0004-000 MMU Control Block
    0xF-0005-004 Kernel Shadow Stack
    0xF-0005-003 Kernel Stack
    0xF-0005:002 Kernel Heap
    0xF-0005:001 Kernel Data
    0xF-0005:000 Kernel Code
    0xF-0006:KKK Shared Memory (KKK = Key)
    0xF-0067-KKK Shared ROM Space (KKK = Key)
    0xF-0008-000 Mohitor space
    0xF-1PPP-P00 Context space

User Program Memory
    0x0-PPPP-0SS    Code
    0x0-PPPP-1SS    Static Data
    0x0-PPPP-2SS    Dynamic Data (Heap)
    0x0-PPPP-300    Stack
    0x0-PPPP-301    Shadow Stack

Boot Disk =>
        Block 0:
                0000:0007: (8 bytes) flags
                  F    E    D    C    B    A    9    8    7   6    5    4    3     2   1    9
                ----:----:----:----:----:----:----:----:----:----:----:----:----:----:---D:AUPB
                        B = Boot block present
                        U = UEFI Block present
                        P = Parition block present
                        A = Active
                        D = Dirty

                0007:000F: (8 bytes) Serial #
                0010:001F: (16 bytes) Disk name (ASCII)
                0020:0027: (8 bytes) # of blocks on disk
                0028:002F: (8 bytes) # of bad blocks available
                0030:0037: (8 bytes) Block # where bad blocks start)
                0038:003F: Size of block
                0040:0047: (8 bytes) Block # for UEFI table
                0048:004F: (8 bytes) Alternate Block # for UEFI table
                0050:0057: (8 bytes) # of UEFI blocks that follow
                0058:005F: (8 bytes) Block # for parition table)
                0060:0067: (8 bytes) Alternate Block # for parition table)
                0060:006F: (8 bytes) # of partition blocks that follow
                0070:0077: (8 bytes) Block # for boot code
                0078:007F: (8 bytes) Alternate # for boot code
                0080:0087: (8 bytes) # of boot code blocks that follow

UEFI Table => (64 OS's)
        0000:000F: (16 bytes) ASCII OS Name
        0010:0013: (4 bytes) Controller/Disk/Parition #
        0014:001F: (Reserved)
        0020:002F: (16 bytes) Boot file on UEFI partition // Will be loaded into kernel memory directly
        0030:003F: (Reserved)
        ....

Partition Table =>
        0000:000F: (16 bytes) Parition name
        0010:0013: (8 bytes) Partition type code
        0014:001F: (8 bytes) Parition start block group
        0020:0027: (8 bytes) Partition size (in block groups)
        0028:003F: Reserved

OnyxFS =>
        Data Block Group =>
                0000:0007: Parent block (64-bit block)
                0008:000F: Block start  (64-bit block)
                0010:0017: Block length (# of blocks that follow in the run)
                0018:001F: Next block   (64-bit block)
                0020:0023: Block type   (32-bit block ID number)
                0024-002B: Block size   (8-bit how large are blocks in this extent)
                002C:003F: Reserved

        Superblock =>
            File System Type        (64-bits)
            Total Available Blocks  (64-bits)
            Free Block Count        (64-bits)
            Root Directory Block    (64-bits)

        Directory Block =>
            0000:001F Name
            0010:0017 Permissions block
            0018:001F Parent block
            0020:0FFF Sub-blocks (files, directories, indirect) 508 entries per block

        FileSystem =>
            FIleName (32 bytes)
            Permission Block Ptr
            Data Block Group Pointer

        Permissions Block =>
            0000:0007 User ID
            0008:000f Group ID
            0010:0017 Permission Bits
            0018:001F Reserved

              F   E    D    C    B    A    9    8    7    6    5    4    3    2    1    0
            ----:----:----:----:----:----:----:----:----:----:----:----:----:----:---A:SXWR
                S = Super user allowed
                A = Auto super user
                R = Readable
                W = Writable
                E = Executable

        BlockTypes =>
            0000'0000'0000'0000 Root block
            0000'0000'0000'0001 Directory block
            0000'0000'0000'0002 File block
            0000'0000'0000'0003 Indirect block
            0000'0000'0000'0004 Block Group block

        FileSystem Type Codes:
            0000'0000'0000'0000   Unknown
            0000'0000'0001'0000   OnyxBootFS 1.0
            0000'0000'0001'0100   OnyxFS 1.0

        OnyxBootFS Structure
            Block 0
                0000:001F Name              (32 chars)
                0020:0027 Load address      (64-bits)
                0028:002F Size              (Number of blocks)
                0030:0037 Next OS Block     (64-bits)
                0038:007F Reserved
                0080:00FF Parameters
            Block 1+(size-1)
                 ... Blocks follow

Process Stepping
    CPU Maintenance
    IO Operations
    Errors/Traps
    Load from memory
    Decode
    Execute
    Store to memory

Memory Configurations =>
  Linear
    Processes: 1 Segments: 0 Banks: 1
    Linear =>
      Single block of uint8
      func Init, Exit, Read, Write, LoadBlock, SaveBlcok
    Banked
      Processes: 1 Segments: 0 Banks: (number)
      func Init, Exit, Read, Write, SelectBank, GetBank, LoadBlock, SaveBlock
    Virtual
      Processes: (number) Segments: (number) VirtualPages (number) Physical Pages (number)
      func Init, Exit, Read, Write, LoadBlock, SaveBlock,
            SwapIn, SwapOut

Conifguration =>
  CPU:
    Model:
    Features:
  Memory:
    Type: [Linear|Banked|Virtual]
    Pages: #
      { Banked }
        Bank size: #
        BankNumber #...
      { Virtual }
        VirualPages #
        PhysicalPages #

Programs included:
    onyxsim         - Program that runs the simulator/monitor
    onuxasm         - Program that assembles code
    onyxlink        - Program that links code modules
    onyxdump        - Dump code object to readable format
    onyxdisasm      - Disassemble code
    onyxiodispatch  - I/O Dispatcher for various lower-level services
    onyxsysmon      - Onyx system monitor
    onyxnetrtr      - Onyx network router
    onyxnet         - Onyx network node
    onyxlisp        - A lisp-like language
-- Someday perhaps --
    onyxcc          - Onyx C compiler
    onyxbas         - Onyx basic interpreter
    onyxmonkey      - Onyx monkey interpreter
    onyxasm2nat     - Onyx assembly to native code

Onyx Object Format
    Data Types
        End-of-attributes       0x00
        (64-bit Int             0x01
        32-bit Int              0x02
        16-bit Int              0x03
         8-bit Int              0x04
        0-terminated string     0x05
        String attribute        0x06

    .manifest(0000'0000)
        .program(0000'0001)
            (06)name)(05)string(00)
        .version(0000'0002)
            (05)string(00)
        .author(0000'0003)
            (05)string(00)
        .created(0000'0004)
            (05)string(00)
        .modified(0000'0005)
            (05)string(00)
        .account(0000'0006)
            (05)name
            (05)password
            (05)accountcode
            (05)Run as user/password(05)string
            (00)
        .errorsto(0000'0007)
            (05)email|filename
            (00)
        .inputfrom(0000'0008)
            (05)filename
            (00)
        .outputto(0000'0009)
            (05)email|filenae(00)
        .maxtime(0000'000A)
            (05)timeunits(00)
    .proessor(0000'000B)
        (06)name(05)values(00)
    .memory(0000'000C)
        (06)value(00)
    .format(0000'000D)
        (06)value(00)
    .output(0000'000E)
        (06)value(00)
    .require(0000'000F)
        (06)model
        (06)feature
        (06)memory
        (06)iO
        (06)value
        (00)
    .desire(0000'0010)
        (06)[model
        (06)feature
        (06)memory
        (06)iO
        (06)[value
    .priv(0000'0011)
        (06)mode
   .segment(0001'0000)
        (05)name(06)value(00)
        .segpublicsymbols(0001'0001)
            symbol(0001'0002)
                (06)name(05)value(06)value(01)address(00)
        .symbolextern(0001'0003)
            symbol(0001'0002)
                (06)name(05)value(06)value(01)address(00)
        .priv(0001'0003)
            (05)value(00)
    .code(0002'0000)
        .size(0002'0001)
            (01)value(00)
        ... bytes
.endoffile(ffff'ffff)

Runtime file biinding
    monitor takes the --bindfile option
    --bindfile programfilename nativefilename

